/*
문제 풀이.
*/

/*
Quest 1.
1. compareNumbers 라는 함수를 선언하고, 2개의 매개변수(숫자 타입) 를 지정합니다.
2. 조건1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 할당되지 않은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
두번째 매개변수의 값을 찾을 수 없습니다.
----------
3. 값이 할당된 경우 4(순서)에 이어서 작성합니다.
4. 조건2 : 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
----------
5. 작은 경우 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.
----------
6.  1(순서) 함수에 각 매개변수를 지정하여 호출합니다.
 
----------
함수 호출)

compareNumbers(10) 를 호출한 경우 : "두번째 매개변수의 값을 찾을 수 없습니다."

compareNumbers(20, 10) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."

compareNumbers(10, 20) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."
----------
*/
// Answer 1.

function compareNumbers(num1, num2) { // compareNumbers 라는 함수를 선언하고, 2개의 매개변수(숫자 타입) 를 지정
    if (typeof num2 === "undefined"){ //두번째 매개변수의 전달인자 값이 할당되지 않은 경우
        console.log("두번째 매개변수의 값을 찾을 수 없습니다."); 
    }
    else if (num1 >= num2){ //첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.");
    }
    else if (num1 < num2){ //첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 작은 경우
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.");
    }
  }

compareNumbers(10); //두번째 매개변수의 값을 찾을 수 없습니다.
compareNumbers(20, 10); //첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
compareNumbers(10, 20) //첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.

/*
Quest 2.
1. getTotal 이라는 함수를 선언하고, 2개의 매개변수(첫번째는 숫자 타입, 두번째는 문자 타입)를 지정합니다.
2. 조건 1-1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "add" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환합니다.
3. 조건 1-2 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "multiply" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환합니다.
4. 조건 1-3 : 1(순서) 함수가 호출될 때, 모든 조건(1-1, 1-2)이 아닌 경우, 결과값 숫자 0 을 반환합니다.
5. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
6. 5(순서) 변수의 값을 console 에 출력합니다.

----------
함수 호출 예시)

getTotal(5, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 15
getTotal(10, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 55

getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 120
getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 3628800

getTotal(100) 를 호출하여 반환하고 변수를 출력한 결과값 : 0
----------
*/
// Answer 2.

function getTotal (num, str){
    var sum = 0; //덧셈 연산 값을 받을 변수 sum, 초기값은 0으로 지정.
    if (str === "add"){
        for (var i = 1; i <= num; i++){
            sum += i;
        }
    }
    else if (str === "multiply"){
        var sum = 1; // sum의 초기값이 0 이면 아무리 곱해도 값은 0으로 나올 것 같으므로 1로 지정
        for (var i = 1; i <= num; i++ ){
            sum *= i;
        }
    }
    else{
        sum = 0
    }

    return sum;
    /* 
    return - 함수 반환

    함수 내부에서 코드가 동작이 되고 모든 동작이 이뤄진 후 결과값을 함수 밖으로 출력시킬 떄(반환)
    */
    //함수는 호출이 이뤄질때 반드시 반환을 한다.
    // 함수의 마지막 부분에 return이라고 작성한 경우. 제작자가 원하는 값을 뽑아낼 수 있다.
    //return이 없다면 undefined (지정된 내용이 없다)가 반환이 된다.
}

var res = getTotal(5, "add"); //1+2+3+4+5
console.log(res); //return을 깜빡하고 적지 않았을 때는 undefined가 나왔다. retrun을 추가하니 값 15 출력됨. 
var res = getTotal(10, "add"); //1+2+3+...+9+10
console.log(res); // 55
var res = getTotal(5, "multiply"); //1*2*3*4*5
console.log(res); //120
var res = getTotal(10, "multiply"); //1*2*3*...*9*10
console.log(res); //3628800

var res = getTotal(100); //str 값이 없기 때문에 else에 해당
console.log(res);//0

/*
Quest 3.
1. getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열 원소들의 숫자 값들을 비교하여 숫자가 가장 큰 경우, 1(순서) 배열에서 해당된 순서를 결과값으로 반환합니다.
3. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
4. 3(순서) 변수의 값을 console 에 출력합니다.
* 매개변수 배열에는 숫자 이외의 타입도 할당되어 있습니다.

----------
함수 호출 예시)

getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값 : 3

getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값 : 5
----------
*/
// Answer 3.

/*
function getMaxValue(arr) { //getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정
    var max = arr[0]; //배열의 0번째부터 차례로 비교하기 위해 값을 arr[0]으로 지정.
    for (var j = 0; j < arr.length; j++){
        if(max < arr[j]){ //max의 값이 arr[j]의 값보다 작다면
            max = arr[j] //arr[j]의 값을 max에 대입.
        }
    }
    return max; //max 값을 반환
}

var value = getMaxValue([10, -4, 7, 100, "hello", -50]); //getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값
console.log(value); //100
var value = getMaxValue([-400, "world", 60, 0, {}, 1000]); //getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값
console.log(value); //1000
*/
//하다보니 이건 최대값을 구하는 풀이였습니다... 정신 차리고 최대값의 배열순서를 구하는 것으로 다시 풀어봤습니다 


function getMaxValue(arr) { //getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정
    var max = arr[0]; //배열의 0번째부터 차례로 비교하기 위해 값을 arr[0]으로 지정.
    var max2 = 0; //최대값이 배열의 몇번째인지 알기 위해 변수를 하나 더 생성.
    for (var j = 0; j < arr.length; j++){
        if(max < arr[j]){ //max의 값이 arr[j]의 값보다 작다면
            max = arr[j] //arr[j]의 값을 max에 대입하고,
            max2 = j //j(arr의 j번째 원소)를 max2에 대입.
        }
    }
    return max2; //알고 싶은 것은 arr 배열 최대값의 순서이므로 max2를 반환.
}

var value = getMaxValue([10, -4, 7, 100, "hello", -50]); //getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값 
console.log(value); // 3
var value = getMaxValue([-400, "world", 60, 0, {}, 1000]); //getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값
console.log(value); // 5