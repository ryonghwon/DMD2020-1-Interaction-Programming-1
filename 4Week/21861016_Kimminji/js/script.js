console.log("외부 Javascript 로드");

/*
문제 풀이.
*/

/*
Quest 1.
1. compareNumbers 라는 함수를 선언하고, 2개의 매개변수(숫자 타입) 를 지정합니다.
2. 조건1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 할당되지 않은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
두번째 매개변수의 값을 찾을 수 없습니다.
----------
3. 값이 할당된 경우 4(순서)에 이어서 작성합니다.
4. 조건2 : 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
----------
5. 작은 경우 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.
----------
6.  1(순서) 함수에 각 매개변수를 지정하여 호출합니다.
 
----------
함수 호출)
compareNumbers(10) 를 호출한 경우 : "두번째 매개변수의 값을 찾을 수 없습니다."
compareNumbers(20, 10) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."
compareNumbers(10, 20) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."
----------
*/
// Answer 1.

function compareNumbers (m, j){
    // 함수를 호출할 때 함수의 정의보다 적은 수의 인수가 전달되더라도, 오류를 발생시키지 않지만 전달되지 않은 나머지 매개변수에 자동으로 undefined 값을 설정한다.
    if (typeof j === "undefined"){ 
        console.log("두번째 매개변수의 값을 찾을 수 없습니다.");
    }
    // if 조건 안의 실행문이 사실일 때 내부의 코드가 진행되기 때문에 새로운 if 조건문을 작성할 것.
    // 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우 실행되는 if 조건문.
    if (m >= j){
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.");
    }
    // if 조건문의 조건절에 해당하지 않을 때 다른 조건문을 내세워 실행문이 실행되도록 하는 else if 조건문을 작성하도록 한다.
    // 첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작은 경우 실행되는 else if 조건문. 
    else if (m < j){
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.");
    }
}

// compareNumbers(10);은 함수 정의 보다 적은 수의 인수가 전달되어, 전달되지 않은 나머지 매개변수인 j는 자동으로 undefined 값으로 설정되어 if 조건문에 해당하게 된다.
compareNumbers(10); //"두번째 매개변수의 값을 찾을 수 없습니다." 
compareNumbers(20, 10); //"첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."
compareNumbers(10, 20); //"첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."


/*
Quest 2.
1. getTotal 이라는 함수를 선언하고, 2개의 매개변수(첫번째는 숫자 타입, 두번째는 문자 타입)를 지정합니다.
2. 조건 1-1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "add" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환합니다.
3. 조건 1-2 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "multiply" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환합니다.
4. 조건 1-3 : 1(순서) 함수가 호출될 때, 모든 조건(1-1, 1-2)이 아닌 경우, 결과값 숫자 0 을 반환합니다.
5. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
6. 5(순서) 변수의 값을 console 에 출력합니다.
----------
함수 호출 예시)
getTotal(5, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 15
getTotal(10, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 55
getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 120
getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 3628800
getTotal(100) 를 호출하여 반환하고 변수를 출력한 결과값 : 0
----------
*/
// Answer 2.

// 두개의 매개변수의 타입을 순서대로 숫자, 문자 타입으로 지정할 것.
function getTotal (Number, string){
    // 두번째 매개변수의 전달인자 값이 "add" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환
    // 조건 1-1을 실행하기 위한 if 조건문
    if (string === "add"){
        //숫자 1부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환해야 하기 때문에 그 값을 대입할 변수 sum 초기값을 1으로 하여 생성한다.
        var sum = 0;
        // for 반복문으로 작성하여 진행. for (초기 설정; 조건절; 증가)
        // 변수 a가 후위 증가 연산자로 값을 가진후에 1을 증가 시켜 첫번째 매개변수의 전달인자 값보다 작거나 같을때 까지 더해지는 것.
        for (var a = 1; a <= Number; a++){
            sum += a;
        }
    }
    // 두번째 매개변수의 전달인자 값이 "multiply" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환
    // 조건 1-2를 실행하기 위한 else if 조건문
    else if (string === "multiply"){
        // sum의 값을 if 조건문 내부의 sum 변수 처럼 0으로 설정하고 곱셈 연산을 하게되면 결과값이 0이 나오기 때문에 1로 설정한다.
        var sum = 1;
        // for 반복문으로 작성하여 진행. for (초기 설정; 조건절; 증가)
        // 변수 a가 후위 증가 연산자로 값을 가진후에 1을 증가 시켜 첫번째 매개변수의 전달인자 값보다 작거나 같을때 까지 곱해지는 것.
        for (var a = 1; a <= Number; a++){
            sum *= a;
        }
    }
    // 모든 조건(1-1, 1-2)이 아닌 경우, 결과값 숫자 0 을 반환
    // 1-1, 1-2 조건에 모두 해당하지 않을 때 else를 사용한다.
    else {
        // 모든 조건이 아닐 때 결과값 0으로 설정
        sum = 0;
    }
    // 결과값 숫자 0을 반환 할 것.
    return sum;
}
// 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환
// getTotal(5, "add") 를 호출하여 반환하고 변수를 출력
var con = getTotal(5, "add");
console.log(con); // 15
// getTotal(10, "add") 를 호출하여 반환하고 변수를 출력
con = getTotal(10, "add");
console.log(con); // 55
// getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력
con = getTotal(5, "multiply");
console.log(con); // 120
// getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력
con = getTotal(10, "multiply");
console.log(con); // 3628800
// getTotal(100) 를 호출하여 반환하고 변수를 출력
con = getTotal(100);
console.log(con); // 0


/*
Quest 3.
1. getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열 원소들의 숫자 값들을 비교하여 숫자가 가장 큰 경우, 1(순서) 배열에서 해당된 순서를 결과값으로 반환합니다.
3. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
4. 3(순서) 변수의 값을 console 에 출력합니다.
* 매개변수 배열에는 숫자 이외의 타입도 할당되어 있습니다.
----------
함수 호출 예시)
getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값 : 3
getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값 : 5
----------
*/
// Answer 3.

// getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정할 것.
function getMaxValue (array){
    // 배열 원소들의 숫자 값들을 순서대로 비교하여 가장 큰 값을 구하기 위해 변수 Max를 생성해 초기값을 0으로 설정
    var Max = 0;
    // 배열에서 해당된 순서 값을 대입할 변수 Maxvalue를 생성해 초기값을 0으로 설정
    var Maxvalue = 0;
    // 1(순서) 함수에 전달된 매개변수 배열 원소들의 숫자 값들을 비교하기 위해서 for 반복문을 작성할 것.
    // 배열의 위치는 0부터 시작하여 배열길이-1에 해당하므로, 배열 길이보다 작다는 조건절이 들어간다.
    for (var i = 0; i < array.length; i++){
        // 배열 array의 i에 해당하는 값이 Max의 값보다 크다면 그 값이 Max의 값으로 대입될 것.
        if (array[i] > Max) {
            Max = array[i];
            // 배열에서 해당된 위치(i)를 결과 값으로 설정
            Maxvalue = i;
        }
    }
    // 결과값을 반환할 것.
    return Maxvalue;
}
// 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환
// getMaxValue([10, -4, 7, 100, "hello", -50])
var array_1 = [10, -4, 7, 100, "hello", -50];
console.log(getMaxValue(array_1)); //3
// getMaxValue([-400, "world", 60, 0, {}, 1000])
var array_2 = [-400, "world", 60, 0, {}, 1000];
console.log(getMaxValue(array_2)); //5
// 다른 예시 해보기
// getMaxValue([-250, "minji", 130, 134, {}, 20])
var array_3 = [-250, "minji", 130, 134, {}, 20, 578, 219];
console.log(getMaxValue(array_3)); //6