/*
문제 풀이.
*/

/*
Quest 1.
1. compareNumbers 라는 함수를 선언하고, 2개의 매개변수(숫자 타입) 를 지정합니다.
2. 조건1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 할당되지 않은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
두번째 매개변수의 값을 찾을 수 없습니다.
----------
3. 값이 할당된 경우 4(순서)에 이어서 작성합니다.
4. 조건2 : 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
----------
5. 작은 경우 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.
----------
6.  1(순서) 함수에 각 매개변수를 지정하여 호출합니다.
 
----------
함수 호출)
compareNumbers(10) 를 호출한 경우 : "두번째 매개변수의 값을 찾을 수 없습니다."
compareNumbers(20, 10) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."
compareNumbers(10, 20) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."
----------
*/
// Answer 1.
function compareNumbers(a, b) { // 함수 안에 매개변수 a, b 선언
    if(typeof b === "undefined"){ // 만약 b의 데이터 타입이 undefined라고 판단이 될때 if문이 실행됩니다.
        console.log("두번째 매개변수의 값을 찾을 수 없습니다.");
    }
    else if(a >= b){ // a 가 b보다 크거나 같을때 if문이 실행됩니다.
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.");
    }
    else if(a < b){ // a가 b보다 작을때 if문이 실행됩니다.
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.");
    }
}
console.log("1번문제입니다");
compareNumbers(10); // a의 매개변수에만 값이 할당되어 함수가 출력되기 때문에 b에는 매개변수가 할당되지 않아 "두번째 매개변수의 값을 찾을 수 없습니다."가 출력됩니다.
compareNumbers(20, 10); // a와 b에 값이 할당되고 b보다 a가 커 "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."가 출력됩니다.
compareNumbers(10, 10);// a와 b에 값이 할당되고 a랑 b의 값이 같아 "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."가 출력됩니다.
compareNumbers(10, 20); // a와 b에 값이 할당되고 a보다 b의 값이 커 "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."가 출력됩니다.



/*
Quest 2.
1. getTotal 이라는 함수를 선언하고, 2개의 매개변수(첫번째는 숫자 타입, 두번째는 문자 타입)를 지정합니다.
2. 조건 1-1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "add" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환합니다.
3. 조건 1-2 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "multiply" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환합니다.
4. 조건 1-3 : 1(순서) 함수가 호출될 때, 모든 조건(1-1, 1-2)이 아닌 경우, 결과값 숫자 0 을 반환합니다.
5. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
6. 5(순서) 변수의 값을 console 에 출력합니다.
----------
함수 호출 예시)
getTotal(5, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 15
getTotal(10, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 55
getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 120
getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 3628800
getTotal(100) 를 호출하여 반환하고 변수를 출력한 결과값 : 0
----------
*/
// Answer 2.
function getTotal(c, d) { // 함수안에 매개변수 c, d  선언
    var total = 0; // 합산을 위한 변수 생성
    if(d === "add") { // 매개변수 d의 전달인자 값이 add인 경우 if문 실행
        total = 0; // 합산을 위한 변수 total값 0으로 초기화
        for(var i = 0;i <= c; i++) { // 매개변수 c값까지의 모든 값을 더하기위한 for문 생성
            total = total + i; // total 변수에 증가하는 i와 total 값 축척
        }
        
    }
    else if(d === "multiply") { // 매개변수 d의 전달인자 값이 multiply인 경우 if문 실행
        total = 1; // 합산을 위한 변수 totla 값을 1로 초기화(곱셈시 0이면 계속 0이 축척되기 때문)
        for(var i = 1;i <= c; i++) { // 매개변수 c값까지의 모든 값을 곱하기위한 for문 생성
            total = total * i; // total 변수에 증가하는 i와 total을 곱한 값 축척
        }
        
    }
    else { // 그 외 나머지
        total = 0; // total에 0값 반황
    }
    return total; // total 결과값을 반환합니다.
} 
console.log("2번문제입니다");
var quest; // 함수 값을 반환하기 위한 quest 새로운 변수 생성
quest = getTotal(5, "add"); // 함수 결과값을 quest로 반환
console.log(quest); // 15 출력
quest = getTotal(10, "add"); // 함수 결과값을 quest로 반환
console.log(quest); // 55 출력
quest = getTotal(5, "multiply"); // 함수 결과값을 quest로 반환
console.log(quest); // 120 출력
quest = getTotal(10, "multiply"); // 함수 결과값을 quest로 반환
console.log(quest); // 3628800 출력
quest = getTotal(100); // 함수 결과값을 quest로 반환
console.log(quest); // 0 출력

/*
Quest 3.
1. getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열 원소들의 숫자 값들을 비교하여 숫자가 가장 큰 경우, 1(순서) 배열에서 해당된 순서를 결과값으로 반환합니다.
3. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
4. 3(순서) 변수의 값을 console 에 출력합니다.
* 매개변수 배열에는 숫자 이외의 타입도 할당되어 있습니다.
----------
함수 호출 예시)
getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값 : 3
getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값 : 5
----------
*/
// Answer 3.
console.log("3번문제입니다.");
function getMaxValue(e) { // getMaxValue라는 함수를 선언하고 e라는 매개변수를 지정합니다.
    var high = e[0]; // 숫자 값을 비교할 때 제일 큰 숫자를 알아내기 위해 high라는 변수를 생성하고, 배열의 첫번째인 e[0]값을 우선 넣어놓습니다.
    var num = 0; // 제일 큰 숫자의 순서를 알기위한 변수 num을 생성합니다.
    for(var i = 0; i < e.length; i++) { // i라는 변수를 생성하고, i가 e배열의 범위를 넘어갈때 for문을 종료하고 for문이 실행될 동안 i의 값을 1씩 증가시킵니다.
        if(high < e[i]) { // high-> e[0] 배열의 첫번째값이 e[i]-> e[0] 과 비교했을때 작으면
            high = e[i];  // high에 해당 배열의 값을 넣습니다. 계속 반복하여 배열의 제일 큰수를 알아냅니다.
            num = i; // high의 제일 큰 수에 해당하는 배열의 i순서를 num에 할당합니다.
        }
        
    }
    return num; // 할당받은 num을 반환합니다.
    
}
var test; // 함수를 호출하고 반환하여 결과값을 출력하기 위한 변수 test를 생성하였습니다.
test = getMaxValue([10, -4, 7, 100, "hello", -50]); // 배열 함수를 test에 반환합니다.
console.log(test); // 반환한 test를 출력합니다. 100이 가장 크기 때문에 해당 순서인 3이 출력됩니다. // 출력값 - 3
test = getMaxValue([-400, "world", 60, 0, {}, 1000]); // 배열 함수를 test에 반환합니다.
console.log(test); // 반환한 test를 출력합니다. 1000이 가장 크기 때문에 해당 순서인 5가 출력됩니다. // 출력값 - 5
