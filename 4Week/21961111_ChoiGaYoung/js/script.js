/*
문제 풀이.
*/

/*
Quest 1.
1. compareNumbers 라는 함수를 선언하고, 2개의 매개변수(숫자 타입) 를 지정합니다.
2. 조건1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 할당되지 않은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
두번째 매개변수의 값을 찾을 수 없습니다.
----------
3. 값이 할당된 경우 4(순서)에 이어서 작성합니다.
4. 조건2 : 첫번째 매개변수의 전달인자 값과 두번째 매개변수의 전달인자 값을 비교하여 크거나 같은 경우, 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.
----------
5. 작은 경우 아래와 같이 console 에 출력되도록 작성합니다.
----------
첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.
----------
6.  1(순서) 함수에 각 매개변수를 지정하여 호출합니다.
 
----------
함수 호출)

compareNumbers(10) 를 호출한 경우 : "두번째 매개변수의 값을 찾을 수 없습니다."

compareNumbers(20, 10) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다."

compareNumbers(10, 20) 를 호출한 경우 : "첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다."
----------
*/
// Answer 1.

function compareNumbers(a,b){ //compareNumbers 함수 선언하고, 매개변수 (a,b) 지정하였습니다.
    if (typeof b === "undefined"){
        console.log("두번째 매개변수의 값을 찾을 수 없습니다.");
    }
    if (a >= b){ //a를 기준으로 크거나 같을 경우
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.");
    }
    if (a < b){ //작을 경우
        console.log("첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.");
    }
}
//10을 호출한 경우
compareNumbers(10); //두 번쨰 매개변수의 값을 찾을 수 없습니다.

//20, 10을 호출한 경우
compareNumbers(20, 10); //첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 크거나 같습니다.

//10, 20을 호출한 경우
compareNumbers(10, 20); //첫번째 매개변수에 할당된 전달인자의 값이 두번째 매개변수에 할당된 전달인자의 값보다 작습니다.




/*
Quest 2.
1. getTotal 이라는 함수를 선언하고, 2개의 매개변수(첫번째는 숫자 타입, 두번째는 문자 타입)를 지정합니다.
2. 조건 1-1 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "add" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 덧셈 연산하여 결과값을 반환합니다.
3. 조건 1-2 : 1(순서) 함수가 호출될 때, 두번째 매개변수의 전달인자 값이 "multiply" 인 경우, 숫자 1 부터 첫번째 매개변수의 전달인자 값까지 모두 곱셈 연산하여 결과값을 반환합니다.
4. 조건 1-3 : 1(순서) 함수가 호출될 때, 모든 조건(1-1, 1-2)이 아닌 경우, 결과값 숫자 0 을 반환합니다.
5. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
6. 5(순서) 변수의 값을 console 에 출력합니다.

----------
함수 호출 예시)

getTotal(5, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 15
getTotal(10, "add") 를 호출하여 반환하고 변수를 출력한 결과값 : 55

getTotal(5, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 120
getTotal(10, "multiply") 를 호출하여 반환하고 변수를 출력한 결과값 : 3628800

getTotal(100) 를 호출하여 반환하고 변수를 출력한 결과값 : 0
----------
*/
// Answer 2.

function getTotal(number, string){ //첫번째는 숫자 타입(number), 두번째는 문자 타입(string)
    var sum = 0; //조건1을 위한 sum 지정
    if (string === "add"){ //조건1, 두번째 매개변수(string)이 "add"인 경우
        for (var i = 1; i <= number; i++){ //숫자 1부터 첫번째 매개변수(number)까지 for 반복문으로 하나씩 증가
            sum += i; //덧셈
        }
    }
    else if (string === "multiply"){ //조건2, 두번째 매개변수(string)이 "multiply"인 경우
        sum = 1; //0이랑 1를 곱하면 0이 나와서 조건2를 위해 sum을 1로 다시 지정
        for (var i = 1; i <= number; i++){ //숫자 1부터 첫번째 매개변수(number)까지 for 반복문으로 하나씩 증가
            sum = sum *= i; //곱셈
        }
    }
    else { //조건3, 모두 아닐 경우 결과값 숫자 0으로 반환합니다.
        sum = 0;
    }
    return sum; //출력 위한 return 사용
}
//함수 호출!!
var c = getTotal(5, "add"); 
console.log(c); //15

var d = getTotal(10, "add"); 
console.log(d); //55

var e = getTotal(5, "multiply"); 
console.log(e); //120

var f = getTotal(10, "multiply"); 
console.log(f); //3628800

var g = getTotal(100);
console.log(g); //0




/*
Quest 3.
1. getMaxValue 이라는 함수를 선언하고, 1개의 매개변수(배열 타입)를 지정합니다.
2. 1(순서) 함수에 전달된 매개변수 배열 원소들의 숫자 값들을 비교하여 숫자가 가장 큰 경우, 1(순서) 배열에서 해당된 순서를 결과값으로 반환합니다.
3. 새로운 변수를 생성, 1(순서) 함수에 매개변수를 지정하여 호출하고 값을 반환받습니다.
4. 3(순서) 변수의 값을 console 에 출력합니다.
* 매개변수 배열에는 숫자 이외의 타입도 할당되어 있습니다.

----------
함수 호출 예시)

getMaxValue([10, -4, 7, 100, "hello", -50]) 를 호출하여 반환하고 변수를 출력한 결과값 : 3

getMaxValue([-400, "world", 60, 0, {}, 1000]) 를 호출하여 반환하고 변수를 출력한 결과값 : 5
----------
*/
// Answer 3.

function getMaxValue(h){ //매개변수(배열타입) 지정합니다.
    var max = h[0]; //첫번째부터 비교하려고 h 배열의 첫번째인 0을 입력했습니다.
    var j = 0; //반환을 위한 새로운 변수 생성했습니다.
    for(i = 0; i < h.length; i++){ //h의 숫자 중 가장 큰 숫자를 알기 위해 h의 가장 큰 숫자까지 하나씩 더해보는 for 반복문을 이용합니다.
        if (max < h[i]){ //max의 값보다 h[i]의 값이 클 경우에
            max = h[i]; //max에 h[i]의 가장 큰 값으로 지정
            j = i; //비교 후 나온 가장 큰 숫자를 j에 지정
        }
    }
    return j; //반환하기 위해 return을 사용합니다.
}
//getMaxValue([10, -4, 7, 100, "hello", -50])를 호출하고 반환 후 출력
var k = getMaxValue([10, -4, 7, 100, "hello", -50]);
console.log(k); //3

//getMaxValue([-400, "world", 60, 0, {}, 1000])를 호출하고 반환 후 출력
var l = getMaxValue([-400, "world", 60, 0, {}, 1000]);
console.log(l); //5

/* 오류 경험한 것...
3과 5가 콘솔에 떠야 하는데 계속 0과 0만 떠서... 알고보니...
return j;를 for문 안에 넣어놓고 계속 헤매고 있었습니다...
다음부턴 {}를 헷갈리지 않도록 더욱 세심히 보도록 해야 할 것 같습니다. */